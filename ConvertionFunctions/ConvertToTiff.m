function ConvertToTiff(FolderPath)
%This function converts the binary files (.dat) generated by the 
%ImagesClassification script to tiff (or big tiff files).

if( ~strcmp(FolderPath(end),filesep) )
    FolderPath = strcat(FolderPath, filesep);
end
disp(['Starting Tiff conversion for: ' FolderPath]);
ChanList = dir([FolderPath '*.dat']);
if( isempty(ChanList) )
    disp(['No dat file found. End of convertion.']);
    return;
end

if( exist([FolderPath 'red.mat'],'file') )
    InfList = dir([FolderPath 'red.mat']);
end
if( exist([FolderPath 'green.mat'],'file') )
    if( ~exist('InfList') )
        InfList = dir([FolderPath 'green.mat']);
    else
        InfList(end+1) = dir([FolderPath 'green.mat']);
    end  
end
if( exist([FolderPath 'yellow.mat'],'file') )
    if( ~exist('InfList') )
        InfList = dir([FolderPath 'yellow.mat']);
    else
        InfList(end+1) = dir([FolderPath 'yellow.mat']);
    end
end
if( exist([FolderPath 'fluo*.mat'],'file') || exist([FolderPath 'fluo.mat'],'file') )
    fluoList = dir([FolderPath 'fluo*.mat']);
    for ind = 1:size(fluoList,2)
        if( ~exist('InfList') )
            InfList = dir([FolderPath fluoList(ind).name]);
        else
            InfList(end+1) = dir([FolderPath fluoList(ind).name]);
        end
    end
end
if( exist([FolderPath 'speckle.mat'],'file') )
    if( ~exist('InfList') )
        InfList = dir([FolderPath 'speckle.mat']);
    else
        InfList(end+1) = dir([FolderPath 'speckle.mat']);
    end
end
if( exist([FolderPath 'flow.mat'],'file') )
    if( ~exist('InfList') )
        InfList = dir([FolderPath 'flow.mat']);
    else
        InfList(end+1) = dir([FolderPath 'flow.mat']);
    end
end
if( ~exist('InfList') || isempty(InfList) )
    InfList = dir([FolderPath 'Data_*.mat']);
end
if( ~exist('InfList') || isempty(InfList) )
    disp(['No mat file found. End of convertion.']);
    return;
end
tic
for indC = 1:size(ChanList,1)
    ChanName = ChanList(indC).name;
    fid = fopen([FolderPath ChanName]);
    tag = ChanName(1:(strfind(ChanName,'.') - 1));
    try
        idx = arrayfun(@(X) contains(InfList(X).name, tag,'IgnoreCase',true), 1:size(InfList,2)); 
        Infos = matfile([FolderPath InfList(find(idx)).name]);
    catch %Previous file format
        idx = arrayfun(@(X) contains(InfList(X).name,['_' ChanName(1)],'IgnoreCase',true), 1:size(InfList,1)); 
        Infos = matfile([FolderPath InfList(find(idx)).name]);
    end
  
    outFName = [FolderPath 'img_'];
    switch(ChanName)
        case 'green.dat'
            disp('Saving green channel.');
            outFName = strcat(outFName, 'Green.tif');
        case 'red.dat'
            disp('Saving red channel.');
            outFName = strcat(outFName, 'Red.tif');
        case 'yellow.dat'
            disp('Saving amber channel.');
            outFName = strcat(outFName, 'Yellow.tif');
        case 'fluo.dat'
            disp('Saving fluo channel.');
            outFName = strcat(outFName, 'Fluo.tif');
        case 'speckle.dat'
            disp('Saving speckle channel.');
            outFName = strcat(outFName, 'Speckle.tif');
        case 'flow.dat'
            disp('Saving flow channel.');
            outFName = strcat(outFName, 'Flow.tif');            
    end
    
    file = dir([FolderPath ChanName]);
    if (file.bytes < 3900000000)
        fTIF = Fast_Tiff_Write(outFName,1,0);
    else
        fTIF = Fast_BigTiff_Write(outFName,1,0); %BigTiff over 4 GB (3.9 GB to be safe and account for headers)
        disp('Using BigTiff format')
    end

    chunkSize = 100; %Read and save a chunk of images at the same time. A higher value is faster, but is limited by the computer RAM
    for idxImage = 0:chunkSize:Infos.datLength-1 %Read all images in the file
        %Read chunks of images
        if strcmpi(ChanName,'flow.dat')
            dat = fread(fid, Infos.datSize(1,1)*Infos.datSize(1,2)*chunkSize, 'single=>single');
        else
            dat = fread(fid, Infos.datSize(1,1)*Infos.datSize(1,2)*chunkSize, 'single=>uint16');
        end
        if (~isempty(dat))
            nImages = size(dat,1)/Infos.datSize(1,1)/Infos.datSize(1,2);
            dat = reshape(dat,Infos.datSize(1,2),Infos.datSize(1,1),nImages);

            %Tif write using https://github.com/rharkes/Fast_Tiff_Write
            %Requires "Fast_Tiff_Write.m" and "Fast_BigTiff_Write.m"
            for idxImageWrite = 1:nImages
                fTIF.WriteIMG(squeeze(dat(:,:,idxImageWrite))');
            end

            %OPTIONAL: Display 1 image per chunk
            imagesc(squeeze(dat(:,:,1)));
            title(num2str(idxImage+1))
            pause(0.01)      

            %Progress message
            disp([num2str(idxImage+nImages) '/' num2str(Infos.datLength) ' images done.'])

        end
    end
    fclose(fid);
    fTIF.close;

end
disp('Tiff conversion is done.')
toc
end